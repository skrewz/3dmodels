#!/bin/bash
# cf. http://www.soliwiki.com/Skeinforge_Settings
#
# TODO: Make some sort of easy profiling: e.g. ``models'' in many-shells/cooling mode, etc.

# Note: scaling happens after slicing. I.e. the layer count is calculated
# before the object is scaled. You'll want to adjust the layer height accordingly.

function verbosity ()
{
  [ -z "${options['verbose']}" ] || echo $'\e[33m'"$(date +%Y%m%d\ %H:%M:%S):"$'\e[0m'" $1" >&2
}

function debug ()
{
  [ -z "${options['debug']}" ] || echo $'\e[34m'"$(date +%Y%m%d\ %H:%M:%S): DEBUG: "$'\e[0m'" $1" >&2
}

declare inputfile

declare finalfile_strftime="%m%d_%H%M"
mkdir -p "/tmp/$(basename "$0")"
declare working_dir="$(mktemp -d /tmp/$(basename "$0")/working-dir-XXXXXXX)"
declare finals_dir=~/"$(basename "$0")/finals"
declare confdir="$working_dir/dotskeinforge"
declare tmpdir="/tmp/s-skeinforge"

# Set this to the currency you configured skeinforge's Analyze -> Statistic with.
# (i.e. treat the dollar sign as this currency sign, for output purposes):
declare skeinforge_currency="EUR"

#trap "rm -Rf '$working_dir'; echo '(EXIT trap: removed $working_dir)'" EXIT

declare -A options=( \
  [squelch]="" \
  [x11]="" \
  [verbose]="verbose by default" \
  [interactive]="" \
  [save-copy]="" \
  [mail]="by default" \
  [infix]="" \
  [mailto]="" \
  [mailfrom]="" \
  [mail-attach]="" \
  [blockdev]="" \
  [mountpoint]="/mnt" \
  [temp-supplayer]="190" \
  [temp-firstlayer]="195" \
  [temp-otherlayer]="190" \
  [syncsdcard]="" \
  [debug]="" \
)

# Parse any defaults out of ~/.s-skeinforge: {{{
if [ -r ~/.s-skeinforge ]; then
  for keyword in mailfrom mailto blockdev; do
    parsed=$(sed -nre "s/^${keyword}=\"?([^\"]*)\"?$/\1/;T;p" ~/.s-skeinforge || true)
    [ -n "$parsed" ] || continue
    options["$keyword"]="$parsed"
  done
fi
# }}}

# see e.g. ~/.skeinforge/profiles/extrusion/${profilename}/scale.csv
# passed as -o key=value sets.
declare -A skeinforge_options=( \
  ['scale:Activate Scale:']="" \
  ['scale:XY Plane Scale (ratio):']="" \
  ['scale:Z Axis Scale (ratio):']="" \
  ['temperature:Base Temperature (Celcius):']="" \
  ['temperature:Interface Temperature (Celcius):']="" \
  ['temperature:Object First Layer Infill Temperature (Celcius):']="" \
  ['temperature:Object First Layer Perimeter Temperature (Celcius):']="" \
  ['temperature:Object Next Layers Temperature (Celcius):']="" \
  ['temperature:Support Layers Temperature (Celcius):']="" \
  ['temperature:Supported Layers Temperature (Celcius):']="" \
  ['chamber:Initial Extruder Nozzle Temperature Forced (Celcius):']="" \
  ['chamber:PrintBed Temp. Forced (Set 0 to disable):']="" \
  ['chamber:Bed Temperature Begin Change Height (mm):']="" \
  ['chamber:Bed Temperature End Change Height (mm):']="" \
  ['chamber:Bed Temperature End (Celcius):']="" \
  ['raft:None']="" \
  ['raft:Empty Layers Only']="" \
  ['raft:Everywhere']="" \
  ['raft:Exterior Only']="" \
  ['carve:Edge Width (mm):']="" \
  ['carve:Layer Height (mm):']="" \
  ['cool:Activate Cool.. but use with a fan!:']="" \
  ['cool:Turn Fan On at Beginning:']="" \
  ['cool:Turn Fan Off at Ending:']="" \
  ['cool:Orbiting around Object:']="" \
  ['cool:Slow Down during print:']="" \
  ['multiply:Activate Multiply:']="" \
  ['multiply:Number of Columns (integer):']="" \
  ['multiply:Number of Rows (integer):']="" \
  ['dimension:Extruder Retraction Speed (mm/s):']="" \
  ['dimension:Retraction Distance (millimeters):']="" \
  ['speed:Main Flow Rate (scaler):']="" \
  ['speed:Main Feed Rate (mm/s):']="" \
  ['fill:Infill Solidity (ratio):']="" \
)

declare -a export_filename_infixes=( )
# This offers a way to achieve this by the file system:
# sed  -i.bak -re "s|^(XY Plane Scale \(ratio\)):\t.*$|\1:\tvalue|" /tmp/skeinforge_copied/profiles/extrusion/PLA\,\ firsttry/scale.csv

while [ "$#" != "0" ]; do # main_options_parsing
  case "$1" in
      #--help-header: Invocation-changing options:
    --help) #doc: This (auto-generated) --help listing. # {{{
      echo -e "Usage: $(basename "$0") [options] <filename.stl>\n"
      sed -nre '/^while.*main_options_parsing/,/^done.*main_options_parsing/ {s|^\s+(-[^*][^)]*)[)]\s*(#parm: ([^#{ ]*))?\s*(#doc: ([^#{]*))?.*$|\1{ \3{ \5|;Tl;s/\|/ & /g;s/<>//g;s/^/  /;p;b;:l s/^\s*#--help-header: (.*)$/\n\1/;Ts;p;s/.*//g;p;b; :s s/^\s*#--help-spacer$//;T;p}' "$0" | (echo 'OPTION{PARM{DESCRIPTION'; cat) |   column -ets '{'
      exit 0
      ;; # }}}
    --syncsdcard) #doc: Mounts/syncs/umounts sdcard from finalsdir. {{{
      options['syncsdcard']="set"
      ;; # }}}

      #--help-header: Output options:
    -I|--interactive) #doc: Enable ``interactive'' mode: best-effort attempt at making skeinforge worth waiting for {{{
      options['interactive']="set"
      ;; # }}}
    --nv|--no-verbose)  #doc: Disable verbose mode (verbose by default) {{{
      options['verbose']=""
      ;; # }}}
    --debug) #doc: Enable debug mode. {{{
      options['debug']="set"
      ;; # }}}
    -i|--infix)  #parm: label #doc: Add a wildcard output file ``infix'' token. E.g. ``1sttry'' or ``green_filament''. {{{
      options['infix']="$2"; shift
      ;; # }}}
    --save-copy) #parm: path #doc: Save a copy of the final file in this (verbatim) path. Useful for makefiles. {{{
      options['save-copy']="$2"; shift
      ;; # }}}
    -X|--x11) #doc: Allow X11 out of `skeinforge`. Otherwise, DISPLAY is overruled to avoid windows opening. {{{
      options['x11']="set"
      ;; # }}}

      #--help-header: Control slicing:
    --scale) #parm: scale #doc: General scale. Either ``[dec]z[dec]'' or ``[dec]'', for different XY/Z scales {{{
      if egrep -q "^[0-9]+(\.[0-9]+)?z[0-9]+(\.[0-9]+)?$" <<< "$2"; then
        p="$2"
        verbosity "Different XY/Z scaling specified: \"$2\" -> xy=\"${p%%z*}\" z=\"${p##*z}\"."
        skeinforge_options['scale:Activate Scale:']="True"
        skeinforge_options['scale:XY Plane Scale (ratio):']="${p%%z*}"; 
        skeinforge_options['scale:Z Axis Scale (ratio):']="${p##*z}"
        export_filename_infixes+=( "sc${p%%z*}z${p##*z}" )
      elif egrep -q "^[0-9]+(\.[0-9]+)?$" <<< "$2"; then
        verbosity "Hint: The --scale option takes e.g. \`\`--scale 0.1z0.2'' too, if you want to scale Z different to XY."
        skeinforge_options['scale:Activate Scale']="True"
        skeinforge_options['scale:XY Plane Scale (ratio):']="$2"
        skeinforge_options['scale:Z Axis Scale (ratio):']="$2"
        export_filename_infixes+=( "sc${2}" )
      else
        echo "Unrecognized --scale: \"$2\". Aborting." >&2
        exit 1
      fi
      shift
      ;; # }}}
    --support) #doc: Enable the ``raft'' module's generation of support material. # {{{
      skeinforge_options['raft:Exterior Only']="True"
      skeinforge_options['raft:None']="False"
      skeinforge_options['raft:Everywhere']="False"
      skeinforge_options['raft:Empty Layers Only']="False"
      export_filename_infixes+=( "supp" )
      ;; # }}}
    --cols|--columns) #parm: numcols #doc: Activate the ``multiply'' module and use this number of columns # {{{
      skeinforge_options['multiply:Activate Multiply:']="True"
      skeinforge_options['multiply:Number of Columns (integer):']="$2"
      export_filename_infixes+=( "cols$2" )
      shift
      ;; # }}}
    --rows) #parm: numrows #doc: Activate the ``multiply'' module and use this number of rows # {{{
      skeinforge_options['multiply:Activate Multiply:']="True"
      skeinforge_options['multiply:Number of Rows (integer):']="$2"
      export_filename_infixes+=( "rows$2" )
      shift
      ;; # }}}
      #--help-spacer
    --ew|--edge-width) #parm: ew #doc: Use this edge width (width of the extruded edges, as skeinforge sees it.)# {{{
      skeinforge_options['carve:Edge Width (mm):']="$2"
      export_filename_infixes+=( "ew$2" )
      shift
      ;; # }}}
    --lh|--layer-height) #parm: mm #doc: Set the layer height. E.g. ``0.2''. Beware of scaling. # {{{
      skeinforge_options['carve:Layer Height (mm):']="$2"
      export_filename_infixes+=( "lh$2" )
      shift ;;
      # }}}
      #--help-spacer
    --slow-cool) #doc: Enable ``slow cooling'' mode. Slow down the print to keep layer time up.# {{{
      skeinforge_options['cool:Activate Cool.. but use with a fan!:']="True"
      skeinforge_options['cool:Turn Fan On at Beginning:']="True"
      skeinforge_options['cool:Turn Fan Off at Ending:']="True"
      skeinforge_options['cool:Orbiting around Object:']="False"
      skeinforge_options['cool:Slow Down during print:']="True"
      export_filename_infixes+=( "slowcool" )
      ;;# }}}
    --fan-cool) #doc: Enable ``fan cooling'' mode. Do orbiting moves to keep layer time up. # {{{
      skeinforge_options['cool:Activate Cool.. but use with a fan!:']="True"
      skeinforge_options['cool:Turn Fan On at Beginning:']="True"
      skeinforge_options['cool:Turn Fan Off at Ending:']="True"
      skeinforge_options['cool:Orbiting around Object:']="True"
      skeinforge_options['cool:Slow Down during print:']="False"
      export_filename_infixes+=( "fancool" )
      ;;# }}}
    --no-cool) #doc: Disable the ``cool'' module altogether. # {{{
      skeinforge_options['cool:Activate Cool.. but use with a fan!:']="False"
      export_filename_infixes+=( "nocool" )
      ;;# }}}
      #--help-spacer
    --bf|--bed-firstlayer) #parm: temp #doc: Set temperature for the bed for the first layer. # {{{
      # skrewz@20150802: confirmed, this controls the first layer forced
      # temperature. Can be used to delay starting prints with.
      skeinforge_options['chamber:PrintBed Temp. Forced (Set 0 to disable):']="$2"
      export_filename_infixes+=( "bf$2" )
      shift
      ;;# }}}
     --tf|--temp-firstlayer) #parm: temp #doc: Set the first layer extruder temperature. # {{{
      # Defines the raft interface temperature:
      #skeinforge_options['temperature:Interface Temperature (Celcius):']="$2"
      # Defines the infill temperature of the first layer of the object:
      skeinforge_options['temperature:Object First Layer Infill Temperature (Celcius):']="$2"
      # Defines the edge temperature of the first layer of the object.
      skeinforge_options['temperature:Object First Layer Perimeter Temperature (Celcius):']="$2"
      # Defines the raft base temperature:
      skeinforge_options['temperature:Base Temperature (Celcius):']="$2"
      skeinforge_options['chamber:Initial Extruder Nozzle Temperature Forced (Celcius):']="$2" \
      export_filename_infixes+=( "tf$2" )
      shift ;; # }}}
   --bo|--bed-otherlayer) #parm: temp #doc: Set the bed temperature for other layers but the first.# {{{
      skeinforge_options['chamber:Bed Temperature End (Celcius):']="$2"
      export_filename_infixes+=( "bo$2" )
      shift
      ;;# }}}
    --to|--temp-otherlayer) #parm: temp #doc: Set the extruder temperature for other layers # {{{
      # Defines the temperature of the next layers of the object.
      skeinforge_options['temperature:Object Next Layers Temperature (Celcius):']="$2"
      #
      # Could be parsed as --temp-supplayer or some such:
      # Defines the support layers temperature:
      skeinforge_options['temperature:Support Layers Temperature (Celcius):']="$2"
      # Defines the temperature of the supported layers of the object,
      # those layers which are right above a support layer:
      skeinforge_options['temperature:Supported Layers Temperature (Celcius):']="$2"
      export_filename_infixes+=( "to$2" )
      shift ;; # }}}
      #--help-spacer
    --solid) #doc: Make the object solidly filled. {{{
      skeinforge_options['fill:Infill Solidity (ratio):']="1.0"
      export_filename_infixes+=( "solid" )
      ;;# }}}
    --hollow) #doc: Make the object hollow. Infil solidity at 0.0, that is. # {{{
      skeinforge_options['fill:Infill Solidity (ratio):']="0.0"
      export_filename_infixes+=( "holl" )
      ;; # }}}
    --is|--infill-solidity) #parm: ratio #doc: Set the infil solidity ratio. Number in [0;1.0]. # {{{
      skeinforge_options['fill:Infill Solidity (ratio):']="$2"
      export_filename_infixes+=( "is$2" )
      shift
      ;;# }}}
      #--help-spacer
    --retract-speed) #parm: mmps #doc: Set the extruder retraction speed in mm/s.# {{{
      skeinforge_options['dimension:Extruder Retraction Speed (mm/s):']="$2"
      export_filename_infixes+=( "rs$2" )
      shift
      ;; # }}}
    --retract-length) #parm: mm #doc: Set the extruder's retraction length. E.g. ``7''. # {{{
      skeinforge_options['dimension:Retraction Distance (millimeters):']="$2"
      export_filename_infixes+=( "rd$2" )
      shift
      ;; # }}}
    --flow-rate) #parm: ratio #doc: Set the ``speed'' module's main flow rate. Number in [0;1.0]. # {{{
      skeinforge_options['speed:Main Flow Rate  (scaler):']="$2"
      export_filename_infixes+=( "fr$2" )
      shift
      ;; # }}}
    --feed-rate) #parm: mmps #doc: Set the main feed rate. I.e. how fast the printer head moves X/Y wise.# {{{
      skeinforge_options['speed:Main Feed Rate (mm/s):']="$2"
      export_filename_infixes+=( "${2}mmps" )
      shift
      ;; # }}}

      #--help-header: Mail settings:
    --mail) #doc: Have email sent when slicing finishes. On by default. Doesn't work well with --x11.{{{
      options['mail']="set"
      ;; # }}}
    --no-mail) #doc: Disable sending of email (sending by default.) {{{
      options['mail']=""
      ;; # }}}
    --mailto)  #parm: email#doc: Set mailto address. Picked out of ~/.s-skeinforge, too. {{{
      options['mailto']="$2"; shift
      ;; # }}}
    --mailfrom) #parm: email #doc: Set the mail-from address. Picked out of ~/.s-skeinforge, too. {{{
      options['mailfrom']="$2"; shift
      ;; # }}}
    --mail-attach) #doc: Enable attachment of produced finalfile to email notification (can be heavy.) {{{
      options['mail-attach']="set"
      ;; # }}}

    -*)
      echo "This isn't an option to $(basename "$0"): \`\`$1''"
      exit 1
      ;;
    *)
      inputfile="$(pwd)/$1"
      ;;
  esac
  shift
done # main_options_parsing


if [ -n "${options['infix']}" ]; then
  export_filename_infixes=( "${options['infix']}" "${export_filename_infixes[@]}" )
fi

if [ -n "${options['syncsdcard']}" ]; then
  if [ ! -b "${options['blockdev']}" ]; then
    echo "Block device ${options['blockdev']} doesn't exist. Not hanging around." >&2
    exit 1
  fi
  sudo mount -o noatime,sync "${options['blockdev']}" "${options['mountpoint']}" || exit 1
  sudo mkdir -p "${options['mountpoint']}/archives/$(date +%F)"
  verbosity "Moving files off \"${options['mountpoint']}\"'s root -> \"${options['mountpoint']}/archives/$(date +%F)/\"..."
  sudo rsync --remove-source-files --exclude $(date +"${finalfile_strftime//%[MH]/??}")*.gcode  -tr ${options['verbose']:+-v } "${options['mountpoint']}"/*.gcode  "${options['mountpoint']}/archives/$(date +%F)/"
  verbosity "Copying \"$finals_dir/\"$(date +"${finalfile_strftime//%[MH]/??}")*.gcode and \"$finals_dir/\"$(date -d "yesterday" +"${finalfile_strftime//%[MH]/??}")*.gcode to \"${options['mountpoint']}\"'s root..."
  sudo rsync -ctr ${options['verbose']:+-v }"$finals_dir/"$(date +"${finalfile_strftime//%[MH]/??}")*.gcode "$finals_dir/"$(date -d "yesterday" +"${finalfile_strftime//%[MH]/??}")*.gcode "${options['mountpoint']}/"
  sudo umount "${options['mountpoint']}"
  exit 0
fi




declare skeinforge_pid=""
trap 'rm -Rf "$working_dir"; echo "(EXIT trap: removed $working_dir)"; [ -z "$skeinforge_pid" ] || ! ps -p $skeinforge_pid &>/dev/null || kill $skeinforge_pid' EXIT
declare skeinforge_logfile=""
# stdout contains the log file where output is going into:
function skeinforge_in_background ()
{ # {{{
  local confdir="$1"
  local working_file="$2"
  if [ -z "${options['x11']:-}" ]; then
    override_display=:1337
  else
    override_display="$DISPLAY"
  fi

  debug "Running \`DISPLAY=\"$override_display\" skeinforge --prefdir=\"$confdir\" \"$working_file\" > "${working_file%.stl}.skeinforge.log" &\`..."
  DISPLAY="$override_display" skeinforge --prefdir="$confdir" "$working_file" &> "${working_file%.stl}.skeinforge.log" &
  skeinforge_pid="$!"
  skeinforge_logfile="${working_file%.stl}.skeinforge.log"
} # }}}
# Re-orders infixes in the most sensible order (think limited display options
# when sd-card printing.)
function order_filename_infixes ()
{ # {{{
  local -a new_filename_infixes
  for infix in "${export_filename_infixes[@]}"; do
    new_filename_infixes+=( "$infix" )
  done
  export_filename_infixes=( "${new_filename_infixes[@]}" )
} # }}}

# outputs a starting underscore but no tailing.
function format_filename_infixes ()
{ # {{{
  order_filename_infixes
  for infix in "${export_filename_infixes[@]}"; do
    echo -n "_${infix}"
  done
} # }}}

function filter_skeinforge_live_output ()
{ # {{{
  sed -nrue ':a s|\.\.\.|...\r\n|;tp;p;b;:p P;D;ba' | egrep --line-buffered -o "[A-Z][^ ]+ procedure took [0-9]+ seconds?\." |
  while read line; do
    verbosity $'\e[33mskeinforge\e[0m'": $line"
  done
} # }}}

function generate_skeinforge_logfile_summary ()
{ # {{{
  local logfile="$1"
  debug "entered: $FUNCNAME"
  local max_layer_count="$(sed -nr "s|.*count [0-9]+ of ([0-9]+)\.\.\..*$|\1|;T;p" "$logfile" | sort -nr | head -1)"
  echo "$(date +%F\ %T): generate_skeinforge_logfile_summary(): Working with logfile \"$logfile\""
  echo $'\e[K'
  echo  "- Max layer number seen: ${max_layer_count:-(still unknown)}"$'\e[K'
  cat "$logfile" |
  sed -nrue ':a s|\.\.\.|...\r\n|;tp;p;b;:p P;D;ba' | egrep --line-buffered -o "[A-Z][^ ]+ procedure took [0-9]+ seconds?\." |
  while read line; do
    echo "- $line"$'\e[K'
  done
  tail -1 "$logfile" | sed -rn "s|^.*\.\.\.(.*)\.\.\...$|- "$'\e[32mLast activity: \\1\e[0m.'"${max_layer_count:+ (max layer count: $max_layer_count)}"$'\e[K\\n|;T;p'
} # }}}

function produce_skeinforge_output_stats ()
{ # {{{
  # Swallow stdin:
  local statistics_section="$(sed -n '/Statistics are being generated/,/The exported file is saved/ p')"
  sed -n '/^Material$/,/^ $/ p' <<< "$statistics_section"
  sed -n '/^Extruder$/,/^ $/ p' <<< "$statistics_section"
  sed -n '/^Filament$/,/^ $/ p' <<< "$statistics_section"
  sed -n '/^Extent$/,/^ $/ p' <<< "$statistics_section"
  sed -n '/^Cost$/,/^ $/ p' <<< "$statistics_section"
  sed -n '/^Slice$/,/^ $/ p' <<< "$statistics_section"
} # }}}


function create_options_respecting_tmpdir_for_config ()
{ # {{{
  cp -aL ~/.skeinforge "$confdir" >&2
  verbosity "Creating confdir=\"$confdir\"...."

  for fullkey in "${!skeinforge_options[@]}"; do
    # Don't do things we don't have alterations for:
    [ -n "${skeinforge_options[$fullkey]:-}" ] || continue
    key="${fullkey#*:}"
    module="${fullkey%%:*}"
    key_as_regexp="$(sed -re 's/[^a-zA-Z0-9 ]/./g' <<< "$key")"
    #verbosity "Dealing with fullkey=\`\`$fullkey''; module=\`\`$module''; key=\`\`$key''; key_as_regexp=\`\`$key_as_regexp'', value=\`\`${skeinforge_options["$fullkey"]}''."
    if ! egrep -q "^${key_as_regexp}$" <<< "$key"; then
      echo "Skeinforge settings \"$fullkey\" (or rather: \"$key\") didn't get matched with derived regexp \"$key_as_regexp\". Aborting." >&2
      exit 1
    fi
    for file in "$confdir/profiles/extrusion/"*"/${module}.csv"; do
      #debug "Doing variable substitution for file=${file}..."
      sed  -i.bak -re "s|^(${key_as_regexp})\t.*$|\1:\t${skeinforge_options["$fullkey"]}|" "$file"
      new_values="$(diff "${file}.bak" "$file"  | sed -nre "s|^> ${key_as_regexp}:?\t(.*)$|\1|;T;p")"
      old_values="$(diff "${file}.bak" "$file"  | sed -nre "s|^< ${key_as_regexp}:?\t(.*)$|\1|;T;p")"
      if [ -n "${new_values}" ]; then
        verbosity "Assigned: $(printf $'\e[33m%-50s\e[0m\e[32m%7s → %-7s\e[0m in %s' "$(basename "$file" .csv)/$key" "$old_values" "$new_values" "${file#$confdir/}")"
      fi
    done
  done
  echo "$confdir"
} # }}}



mkdir -p "$tmpdir"
mkdir -p "$finals_dir"

if [ -z "$inputfile" ]; then
  echo "No input file specified. Aborting." >&2
  exit 0
fi

cd "$tmpdir"
verbosity "We're now in this here directory: \"$(pwd)\"."

[ -z "${options['verbose']}" ] || clear # <- for cursor save/restore to make sense.


time_before="$(date +%s)"
basename_of_inputfile="$(basename "$inputfile" .stl)"
new_working_file="$working_dir/$(date +%Y%m%d)_${basename_of_inputfile}.stl"
expected_output_file="$working_dir/$(date +%Y%m%d)_${basename_of_inputfile}.gcode"
cp -a "$inputfile" "$new_working_file"
confdir="$(create_options_respecting_tmpdir_for_config)"

dateless_basename_finalfile="$(format_filename_infixes)_${basename_of_inputfile}.gcode"
verbosity "Will output according to \"${finals_dir}/${finalfile_strftime}"$'\e[32m'"$dateless_basename_finalfile"$'\e[0m\"'
skeinforge_in_background "$confdir" "$new_working_file"
debug "started skeinforge_in_background; pid supposedly is ${skeinforge_pid}."
[ -z "${options['interactive']}" ] || echo -n $'\e[s' # save cursor position
while ps -p "$skeinforge_pid" &>/dev/null; do
  if [ -n "${options['interactive']}" ]; then
    echo -n $'\e[u' # restore cursor position
    generate_skeinforge_logfile_summary "$skeinforge_logfile"
  fi
  sleep 1
done
time_after="$(date +%s)"

[ -z "${options['interactive']}" ] || echo -n $'\e[s' # save cursor position

generate_skeinforge_logfile_summary "$skeinforge_logfile"
verbosity "Done exporting $basename_of_inputfile (in $((time_after - time_before))s.) Juggling files around now."
finals_dir_output="${finals_dir}/$(date +"$finalfile_strftime")${dateless_basename_finalfile}"
cp $([ -z "${options['verbose']}" ] || echo -n -v ) "$expected_output_file" "$finals_dir_output"
if [ -n "${options['save-copy']}" ]; then
  cp -a "$expected_output_file" "${options['save-copy']}"
fi

skeinforge_output_stats="$(produce_skeinforge_output_stats < "${expected_output_file%.gcode}.skeinforge.log")"
dimensions="$(sed -nre "s/^[XYZ].*([wdh])(idth|epth|eight) of ([0-9]+) mm\.$/\1\3/;T;p"  <<< "$skeinforge_output_stats" | tr -d "\n")"
build_time="$(sed -nre "s/^Build time is (.*)\.$/\1/;T;s/ ?days ?/d/;s/ ?minutes ?/m/;s/ ?seconds ?/s/;s/ ?hours ?/h/;p"  <<< "$skeinforge_output_stats")"
total_cost_with_dollar_sign="$(sed -nre "s/^Total cost is (.*)\.$/\1/;T;p"  <<< "$skeinforge_output_stats")"
total_cost_with_currency_sign="$(sed "s/[$]$/$skeinforge_currency/" <<< "$total_cost_with_dollar_sign")"
verbosity $'Stats:\n'"$skeinforge_output_stats"

if [ -n "${options['mail']}" ] && [ -n "${options['mailto']}" ] && [ -n "${options['mailfrom']}" ]; then
  infixes_if_any="$(format_filename_infixes | sed 's/^_//')"
  verbosity "Sending final file to ${options['mailto']}... by \`mailx\` (which you've got configured, right?)"
  (
    echo -e "Time to slice: $((time_after-time_before))s\n"
    echo "$skeinforge_output_stats" |  sed -re $'s/^[A-Za-z]+$/&:\\n=====================================/'
    echo -e "\n\nIt's here now:\n\n   $finals_dir_output\n\n$([ -z "${options['mail-attach']:-}" ] || echo '... and attached to this email')."
  ) | mailx \
    -r "$(basename "$0") <${options['mailfrom']}>" \
    -s "$basename_of_inputfile  [$build_time | $dimensions | $total_cost_with_currency_sign]${infixes_if_any:+ [$infixes_if_any]}" \
    $([ -z "${options['mail-attach']}" ] || echo -n "-a $finals_dir_output -a ${expected_output_file%.gcode}.skeinforge.log") \
    "${options['mailto']}"
  verbosity "Done sending by email."
fi
verbosity "Done. "$'\e[32m'"${finals_dir_output}"$'\e[0m now exists.'

verbosity "(end of script, here.)"
# vim: fdm=marker fml=1
